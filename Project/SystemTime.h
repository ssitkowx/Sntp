#pragma once

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// INCLUDES /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include <ctime>
#include <chrono>
#include <string>
#include <memory>

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// MACROS/DEFINITIONS ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#define SET_SYSTEM_TIME_INST(INSTANCE) SystemTime::SetInstance (INSTANCE);

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// CLASSES/STRUCTURES ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

class SystemTime
{
    private:
        static inline SystemTime * instance;

    protected:
        static std::chrono::system_clock::time_point timePoint;

    public:
        SystemTime          () = default;
        virtual ~SystemTime () = default;

        static void          SetInstance   (SystemTime * v_instance);
        static SystemTime *  GetInstance   (void);

        virtual void         Update        (void)                                  = 0;
        virtual std::string  ToStringUTC   (void)                            const = 0;
        virtual std::string  ToString      (const char * v_format = nullptr) const = 0;

        inline std::time_t   InSeconds     (void)                            const;
        inline int64_t       InMiliseconds (void);
};

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////// END OF FILE ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
