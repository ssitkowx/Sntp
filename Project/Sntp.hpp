#pragma once

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////// INCLUDES /////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#include <ctime>
#include <chrono>
#include <string>

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// MACROS/DEFINITIONS ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

#define SET_SNTP_INST(INST) Sntp::SetInst (INST);

///////////////////////////////////////////////////////////////////////////////
/////////////////////////// CLASSES/STRUCTURES ////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

class Sntp
{
    private:
        static inline Sntp * inst;

    protected:
        static std::chrono::system_clock::time_point timePoint;

    public:
        Sntp          () = default;
        virtual ~Sntp () = default;

        static void SetInst (Sntp * vInst);
        Sntp *      operator ()();

        virtual void        Update      (void)                                 = 0;
        virtual std::string ToStringUTC (void)                           const = 0;
        virtual std::string ToString    (const char * vFormat = nullptr) const = 0;
        std::time_t         InSeconds   (void) const 
        { 
            return std::chrono::system_clock::to_time_t (timePoint); 
        }

        constexpr int64_t InMiliseconds (void) const
        {
            auto duration = timePoint.time_since_epoch ();
            return std::chrono::duration_cast<std::chrono::milliseconds> (duration).count ();
        }
};

///////////////////////////////////////////////////////////////////////////////
/////////////////////////////// END OF FILE ///////////////////////////////////
///////////////////////////////////////////////////////////////////////////////